<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".tt.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#+
    public string ToFirstCapital(string str)
    {
        return str.Substring(0, 1).ToUpper() + str.Substring(1);
    }

    public string ToXName_CML(string name)
    {
        return "XName_CML_" + name;
    }

    public string ToAttName(string name)
    {
        return "Attribute_" + name;
    }

    public void MakeCMLClass(string name)
    {
        MakeCMLClass(name, false);
    }

    public void MakeCMLClass(string name, bool withOld)
    {
        string className = "CML" + ToFirstCapital(name);
        string xname = ToXName_CML(name);
#>
    public partial class <#= className #> : CMLElement
    {
        public <#= className #>()
            : base(<#= xname #>)
        { }
<#+
        if (withOld)
        {
#>
        public <#= className #>(<#= className #> old)
            : base(old)
        { }        
<#+
        }
        MakeStrAtt("title");
        MakeStrAtt("convention");
        MakeStrAtt("dictRef");
#>
    }
<#+
    }
#>

<#+
    public void MakeStrsAtt(string name)
    {
#>
        public System.Collections.Generic.IReadOnlyList<string> <#= ToFirstCapital(name) #>
        {
            get
            {
                var vs = GetAttributeValue(<#= ToAttName(name) #>);
                return ToArray(vs);
            }
            set { SetAttributeValue(<#= ToAttName(name) #>, Concat(value)); }
        }
<#+ 
    }
#>

<#+
    public void MakeDblAtt(string name)
    {
#>
        public double <#= ToFirstCapital(name) #>
        {
            get
            {
                var v = Attribute(<#= ToAttName(name) #>).Value;
                return v == null ? double.NaN : double.Parse(v, System.Globalization.NumberFormatInfo.InvariantInfo);
            }
            set { SetAttributeValue(<#= ToAttName(name) #>, value); }
        }
<#+ 
    }
#>


<#+
    public void MakeIntAtt(string name)
    {
#>
        public int <#= ToFirstCapital(name) #>
        {
            get { return GetAttributeValueAsInt(<#= ToAttName(name) #>, 0); }
            set { SetAttributeValue(<#= ToAttName(name) #>, value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); }
        }
<#+ 
    }
#>

<#+
    public void MakeStrAtt(string name)
    {
#>
        public string <#= ToFirstCapital(name) #>
        {
            get { return Attribute(<#= ToAttName(name) #>)?.Value; }
            set { SetAttributeValue(<#= ToAttName(name) #>, value); }
        }
<#+ 
    }
#>
