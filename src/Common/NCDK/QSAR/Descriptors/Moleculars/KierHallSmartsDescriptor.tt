<#@ include file="..\..\..\..\EStateFragments.ttinclude" #>

/* Copyright (C) 2008 Rajarshi Guha  <rajarshi@users.sourceforge.net>
 *
 *  Contact: rajarshi@users.sourceforge.net
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation; either version 2.1
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

using NCDK.Config.Fragments;
using NCDK.SMARTS;
using NCDK.Tools.Manipulator;
using System.Collections.Generic;

namespace NCDK.QSAR.Descriptors.Moleculars
{
    /// <summary>
    /// A fragment count descriptor that uses e-state fragments.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Traditionally the e-state descriptors identify the relevant fragments and
    /// then evaluate the actual e-state value. However it has been
    /// <see href="http://www.mdpi.org/molecules/papers/91201004.pdf">shown</see> in <token>cdk-cite-BUTINA2004</token>
    /// that simply using the <i>counts</i> of the e-state fragments can lead to QSAR models
    /// that exhibit similar performance to those built using the actual e-state indices.
    /// </para>
    /// <para>
    /// Atom typing and aromaticity perception should be performed prior to calling this
    /// descriptor. The atom type definitions are taken from <token>cdk-cite-HALL1995</token>.
    /// The SMARTS definitions were obtained from <see href="http://www.rdkit.org">RDKit</see>.
    /// </para>
    /// <para>
    /// The descriptor returns an integer array result of 79 values with the
    /// names (see <see href="http://www.edusoft-lc.com/molconn/manuals/350/appV.html">here</see>
    /// for the corresponding chemical groups).
    /// </para></remarks>
    // @author Rajarshi Guha
    // @cdk.module qsarmolecular
    // @cdk.dictref qsar-descriptors:kierHallSmarts
    [DescriptorSpecification(DescriptorTargets.AtomContainer, "http://www.blueobelisk.org/ontologies/chemoinformatics-algorithms/#kierHallSmarts")]
    public class KierHallSmartsDescriptor : AbstractDescriptor, IMolecularDescriptor
    {
        public KierHallSmartsDescriptor()
        {
        }

        [DescriptorResult]
        public class Result : AbstractDescriptorResult
        {
            public Result(IReadOnlyList<int> values)
            {
                this.Values = values;
            }

<#
        for (int i = 0; i < EStateFragments.Names.Count; i++)
        {
#>
            /// <summary>
            /// Number of "<#= EStateFragments.Smarts[i] #>" fragments.
            /// </summary>
            [DescriptorResultProperty("khs.<#= EStateFragments.Names[i] #>")]
            public int KHS<#= EStateFragments.Names[i] #> => Values[<#= i #>];
<#
        }
#>
            public new IReadOnlyList<int> Values { get; private set; }
        }

        private static readonly IReadOnlyList<SmartsPattern> SMARTS = EStateFragments.Patterns;

        /// <summary>
        /// This method calculates occurrences of the Kier &amp; Hall E-state fragments.
        /// </summary>
        /// <returns>Counts of the fragments</returns>
        public Result Calculate(IAtomContainer container)
        {
            container = AtomContainerManipulator.RemoveHydrogens(container);
            
            var counts = new int[SMARTS.Count];
            SmartsPattern.Prepare(container);
            for (int i = 0; i < SMARTS.Count; i++)
                counts[i] = SMARTS[i].MatchAll(container).CountUnique();

            return new Result(counts);
        }
   
        IDescriptorResult IMolecularDescriptor.Calculate(IAtomContainer mol) => Calculate(mol);
    }
}
