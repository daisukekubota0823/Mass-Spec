using Microsoft.VisualStudio.TestTools.UnitTesting;
using CompMs.MsdialDimsCore.Utility;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace MsdialDimsCoreTests
{
    [TestClass]
    public class AbundanceRatioCalculatorTest
    {
        [TestMethod]
        public void CalculateTestSmall()
        {
            double[] measure = new double[]
            {
                1d, 3d, 5d, 2d, 1d
            };

            double[,] references = new double[,]
            {
                { 1d, 0d, 0d },
                { 1d, 1d, 0d },
                { 3d, 1d, 0d },
                { 0d, 0d, 1d },
                { 1d, 0d, 0d },
            };

            var expected = new double[] { 1d, 2d, 2d, };

            var calc = new AbundanceRatioCalculator(measure, references);
            (double[] actual, bool success) = calc.Calculate();
            System.Console.WriteLine("Actual results");
            foreach (var item in actual)
            {
                System.Console.WriteLine($"{item}");
            }
            Assert.IsTrue(success);
            CollectionAssert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void CalculateTestMedium()
        {
            double[] measure = new double[]
            {
                0.9515675 , 1.45400347, 1.45204215, 0.55333421, 0.75745321,
                1.3270528 , 1.45846932, 1.62218289, 1.57467102, 1.16314543
            };

            double[,] references = new double[,]
            {
                { 0.37077792, 0.25445979, 0.32830174, 0.11818114, 0.89446577, 0.52994317 },
                { 0.38625325, 0.32501218, 0.824322  , 0.75493061, 0.68754328, 0.06442887 },
                { 0.93248861, 0.30859008, 0.88905999, 0.50988222, 0.18130075, 0.37864337 },
                { 0.9587081 , 0.02729874, 0.11077055, 0.05721713, 0.11146144, 0.69362182 },
                { 0.82413201, 0.28861714, 0.08492038, 0.15758123, 0.41475624, 0.26921964 },
                { 0.81880542, 0.83666185, 0.1215673 , 0.40758264, 0.09069645, 0.51522514 },
                { 0.77046766, 0.19195424, 0.87984192, 0.57433125, 0.85568497, 0.12585369 },
                { 0.15915942, 0.81267805, 0.77932621, 0.063017  , 0.48197202, 0.84798797 },
                { 0.02300772, 0.92142545, 0.54140657, 0.13784491, 0.70393375, 0.67597247 },
                { 0.41145256, 0.15208063, 0.39072416, 0.96566361, 0.58991482, 0.43691174 },
            };

            double[] expected = new double[]
            {
                0.2537227 , 0.86762449, 0.67462963, 0.41628237, 0.27494196, 0.2266511
            };

            var calc = new AbundanceRatioCalculator(measure, references);
            (double[] actual, bool success) = calc.Calculate();
            System.Console.WriteLine("Actual results");
            foreach (var item in actual)
            {
                System.Console.WriteLine($"{item}");
            }
            Assert.IsTrue(success);
            // CollectionAssert.AreEqual(expected, actual);
            foreach((double act, double exp) in actual.Zip(expected, Tuple.Create))
            {
                Assert.AreEqual(exp, act, 0.00001);
            }
        }

        [TestMethod]
        public void CalculateTestLarge()
        {
            double[] measure = new double[]
            {
                6.5357045 , 5.83366095, 8.00402714, 6.35117704, 7.33635595,
                5.96069237, 5.01232286, 6.68349869, 7.71934827, 7.28011493,
                6.8012451 , 5.7657994 , 5.91381578, 6.61177856, 5.6924595 ,
                7.33830811, 5.99802077, 5.48799364, 7.02733827, 6.2813492 ,
                5.78863647, 5.84674342, 6.34326287, 6.52121688, 4.57823704,
                6.26498891, 5.73824976, 4.7737845 , 5.56166621, 5.43977866
            };

            double[,] references = new double[,]
            {
                { 0.80154545, 0.62053512, 0.09715947, 0.48252648, 0.7423404, 0.88984596, 0.15804047, 0.14031465, 0.26363294, 0.51780549,
                  0.3618578, 0.89101983, 0.04413148, 0.47850204, 0.90066146, 0.78189243, 0.93999185, 0.24542444, 0.57650779, 0.88343907 },
                { 0.7460181, 0.68096902, 0.80394931, 0.63513769, 0.17305072, 0.27394528, 0.26959373, 0.2749303, 0.02061796, 0.30692706,
                  0.8438109, 0.56500394, 0.07243084, 0.03144907, 0.68855949, 0.24408005, 0.43884305, 0.71218088, 0.67562194, 0.95154435 },
                { 0.62177199, 0.57857099, 0.33893027, 0.61113461, 0.45568892, 0.30769867, 0.57983239, 0.89803665, 0.62120344, 0.28918553,
                  0.69036331, 0.58815943, 0.77732056, 0.6840804, 0.29226109, 0.99036114, 0.78523567, 0.62779101, 0.98284584, 0.86848119 },
                { 0.58136929, 0.66067701, 0.58398946, 0.86778607, 0.6790098, 0.6847135, 0.91723142, 0.30146618, 0.83310632, 0.76026173,
                  0.22814228, 0.0919208, 0.27677557, 0.90550661, 0.13754849, 0.32389783, 0.25431399, 0.65453895, 0.71964902, 0.48275763 },
                { 0.24927369, 0.76597909, 0.42504885, 0.56826757, 0.72479972, 0.99695804, 0.16746104, 0.01206842, 0.62157784, 0.84727872,
                  0.77955356, 0.99622722, 0.5821575, 0.97871084, 0.1051135, 0.06693845, 0.8592545, 0.94593142, 0.48065958, 0.29016289 },
                { 0.13448579, 0.60271637, 0.12973714, 0.46128273, 0.82432415, 0.3509362, 0.04722043, 0.45780623, 0.85341067, 0.77875958,
                  0.90518773, 0.39679762, 0.91840603, 0.6638875, 0.28426204, 0.89760197, 0.4344103, 0.15801301, 0.05260944, 0.13276549 },
                { 0.20737019, 0.5176231, 0.30863363, 0.03511837, 0.0130697, 0.24136623, 0.81946281, 0.34207896, 0.34781339, 0.16793272,
                  0.96838752, 0.39541796, 0.27472147, 0.66421083, 0.82276418, 0.38224262, 0.05238933, 0.83234732, 0.14998387, 0.12462102 },
                { 0.37691016, 0.85393837, 0.90563684, 0.39974711, 0.63132617, 0.73586864, 0.89428974, 0.77636362, 0.8270774, 0.58431796,
                  0.04500931, 0.59582095, 0.39974565, 0.23644601, 0.39613361, 0.58219477, 0.57051545, 0.06596185, 0.759606, 0.99755699 },
                { 0.28200657, 0.53282385, 0.92797957, 0.6208579, 0.7377357, 0.80332258, 0.85527833, 0.8528129, 0.82991983, 0.87162716,
                  0.33456341, 0.6578009, 0.98644438, 0.5160134, 0.85536691, 0.23312556, 0.4721058, 0.58131648, 0.14576866, 0.68285036 },
                { 0.74990604, 0.64199261, 0.3256758, 0.88130781, 0.23362263, 0.72513876, 0.9839852, 0.93831201, 0.93092297, 0.57922452,
                  0.48738724, 0.42671129, 0.1246506, 0.7631138, 0.69387714, 0.72265447, 0.09649915, 0.76989261, 0.91132393, 0.02868877 },
                { 0.16540273, 0.41219232, 0.0721815, 0.92834622, 0.75182421, 0.38619895, 0.7787907, 0.34377081, 0.824329, 0.5155206,
                  0.98836404, 0.65129948, 0.05442783, 0.13748188, 0.34469002, 0.38002778, 0.43747523, 0.82181848, 0.9870001, 0.48156421 },
                { 0.32878782, 0.94376444, 0.90220429, 0.03687861, 0.65161702, 0.86118994, 0.76711945, 0.2754033, 0.03909549, 0.88121834,
                  0.47998357, 0.54027187, 0.5311587, 0.03724297, 0.73273495, 0.44339605, 0.30249624, 0.67660504, 0.42604557, 0.40732585 },
                { 0.46232162, 0.10492048, 0.28597178, 0.93946283, 0.57360943, 0.65627644, 0.8553824, 0.84274301, 0.03902441, 0.9037431,
                  0.46646983, 0.05868805, 0.00526946, 0.57329228, 0.87034281, 0.26102774, 0.61456572, 0.92270196, 0.06851961, 0.67342614 },
                { 0.24504566, 0.06463866, 0.22861988, 0.15555269, 0.25011111, 0.84382286, 0.80345645, 0.17679192, 0.77868112, 0.62509531,
                  0.91735133, 0.50560339, 0.52560233, 0.17773637, 0.86974185, 0.93999125, 0.0758533, 0.53130154, 0.96688087, 0.06544431 },
                { 0.34137438, 0.4531351, 0.2011357, 0.30296145, 0.57439349, 0.51255784, 0.92433158, 0.96604261, 0.83349015, 0.18724645,
                  0.78260938, 0.27737211, 0.76427264, 0.597576, 0.0629123, 0.34269811, 0.74343004, 0.13595217, 0.12694701, 0.25378231 },
                { 0.3851816, 0.09432929, 0.41942395, 0.78846238, 0.24349363, 0.05791012, 0.54393971, 0.26723025, 0.76413105, 0.56461092,
                  0.85925019, 0.34324214, 0.47023878, 0.36580381, 0.86559573, 0.2699659, 0.43622043, 0.92483331, 0.87359085, 0.99330015 },
                { 0.05478635, 0.78219594, 0.421486, 0.11412225, 0.19861331, 0.11570228, 0.68785625, 0.67564058, 0.50540916, 0.45604106,
                  0.51308292, 0.44024014, 0.33682223, 0.17994897, 0.43132388, 0.82598389, 0.66510563, 0.76551759, 0.50579537, 0.95687494 },
                { 0.65392386, 0.9586968, 0.35501127, 0.4037823, 0.05557674, 0.84820524, 0.372588, 0.06748572, 0.96183145, 0.33791145,
                  0.12137959, 0.56505249, 0.53677952, 0.00124475, 0.66763368, 0.60132593, 0.46324484, 0.7388584, 0.12009514, 0.24214488 },
                { 0.5813584, 0.66314035, 0.76608842, 0.63670838, 0.19645837, 0.90496513, 0.99841543, 0.46098893, 0.41380374, 0.50584519,
                  0.54939538, 0.79916627, 0.2289312, 0.78390433, 0.40328132, 0.13988207, 0.2771191, 0.60979077, 0.85330421, 0.57288773 },
                { 0.90848082, 0.0649592, 0.21833255, 0.45702038, 0.43015176, 0.84404592, 0.94984943, 0.44142207, 0.64557062, 0.55546299,
                  0.83375465, 0.55583877, 0.45534635, 0.28797661, 0.5437562, 0.12917656, 0.09217213, 0.90821774, 0.17265431, 0.63901191 },
                { 0.56093133, 0.95082296, 0.04909388, 0.1804442, 0.83470787, 0.13442922, 0.69601735, 0.05562934, 0.01486795, 0.57679918,
                  0.65329712, 0.95975449, 0.20287598, 0.01589339, 0.30042461, 0.56221705, 0.73777281, 0.76964843, 0.5976923, 0.81709409 },
                { 0.48758331, 0.76817543, 0.30515725, 0.96491333, 0.85345988, 0.71670028, 0.27399951, 0.51894311, 0.3703128, 0.42232146,
                  0.19420037, 0.04448117, 0.85834255, 0.80512549, 0.78839992, 0.80345874, 0.19823046, 0.52454518, 0.16100371, 0.25753079 },
                { 0.57238039, 0.00113228, 0.99332496, 0.61742782, 0.02872029, 0.40895292, 0.16937422, 0.74239734, 0.49231737, 0.72816363,
                  0.63305784, 0.78438059, 0.56390419, 0.51150589, 0.61875847, 0.3564647, 0.30113972, 0.43530809, 0.05728404, 0.76930649 },
                { 0.55316471, 0.97796715, 0.53108159, 0.8126764, 0.81078659, 0.40293413, 0.56913214, 0.08449638, 0.35128246, 0.29846892,
                  0.10701035, 0.34992615, 0.45584241, 0.77929627, 0.33376533, 0.58541236, 0.98985999, 0.76512455, 0.93327991, 0.37810388 },
                { 0.29393293, 0.89284656, 0.09524061, 0.21763271, 0.2042159, 0.09564155, 0.49199821, 0.14520682, 0.04261778, 0.86752386,
                  0.87382143, 0.21131436, 0.35090596, 0.15379111, 0.19147171, 0.33040446, 0.124527, 0.23545929, 0.88573424, 0.35281331 },
                { 0.79547328, 0.24029278, 0.07859436, 0.7288009, 0.93344705, 0.45920656, 0.55326564, 0.4665477, 0.74110352, 0.28506434,
                  0.33671111, 0.03973891, 0.36882912, 0.86549839, 0.35798027, 0.66022973, 0.40457317, 0.79322668, 0.94584032, 0.46821479 },
                { 0.08946645, 0.36846561, 0.9421161, 0.52737157, 0.36370662, 0.45358947, 0.38551345, 0.25686077, 0.92630273, 0.04078842,
                  0.15968226, 0.4483636, 0.43477639, 0.37692321, 0.58809436, 0.35449959, 0.88890587, 0.45358133, 0.47439297, 0.52041867 },
                { 0.10676199, 0.06813884, 0.81217541, 0.41823836, 0.77314234, 0.72714892, 0.31180331, 0.25341208, 0.87881514, 0.42167703,
                  0.13174914, 0.76138998, 0.18935045, 0.81630983, 0.00716768, 0.21864799, 0.23573798, 0.2962129, 0.21196147, 0.44522682 },
                { 0.97785529, 0.61415042, 0.19341726, 0.88112564, 0.53575275, 0.96698223, 0.21463501, 0.29720028, 0.38687342, 0.26453626,
                  0.40486756, 0.58724149, 0.24221968, 0.71834673, 0.04634044, 0.92111191, 0.44244284, 0.02856876, 0.21429051, 0.7929506 },
                { 0.01287737, 0.54292362, 0.2087681, 0.28337791, 0.63527284, 0.79316309, 0.06185506, 0.95832105, 0.5590593, 0.12581962,
                  0.85703789, 0.47695263, 0.08972572, 0.14561132, 0.10893955, 0.14916418, 0.59650288, 0.99748626, 0.49819859, 0.97482458 }
            };

            double[] expected = new double[]
            {
                0.30065842, 0.26073958, 0.32042191, 0.73748374, 0.01912377,
                0.41060495, 0.54236505, 0.33801349, 0.81074981, 0.67150479,
                0.93692659, 0.91829313, 0.97912791, 0.74620368, 0.80727915,
                0.47617293, 0.75143976, 0.5852935 , 0.93099271, 0.71099719
            };

            var calc = new AbundanceRatioCalculator(measure, references);
            (double[] actual, bool success) = calc.Calculate();
            System.Console.WriteLine("Actual results");
            foreach (var item in actual)
            {
                System.Console.WriteLine($"{item}");
            }
            Assert.IsTrue(success);
            foreach((double act, double exp) in actual.Zip(expected, Tuple.Create))
            {
                Assert.AreEqual(exp, act, 0.00001);
            }
        }

        [TestMethod]
        public void CalculateTestWithNoise()
        {
            double[] measure = new double[]
            {
                1.73780817, 1.45567546, 2.68312221, 2.20471072, 2.22020485,
                2.60968859, 1.76843259, 2.67307589, 2.49991608, 2.57293467,
                2.54959934, 1.85045896, 2.2730009 , 1.81731013, 1.92864641 
            };
            /*
            { // without noise
                1.78486566, 1.47920328, 2.71696768, 2.15551395, 2.26743247,
                2.58879018, 1.79448043, 2.6522341, 2.52925319, 2.60997534,
                2.53322874, 1.8757172, 2.30665836, 1.79367713, 1.95031308
            };
            */

            double[,] references = new double[,]
            {
                { 0.20902769, 0.06936482, 0.02294285, 0.57854499, 0.92222186,
                  0.08995452, 0.59979215, 0.67554615, 0.21713758, 0.140637   },
                { 0.16293464, 0.33228452, 0.23610414, 0.34051506, 0.67037852,
                  0.57783821, 0.34535253, 0.30115196, 0.16029989, 0.23461238 },
                { 0.76672997, 0.8831319 , 0.90468952, 0.14473052, 0.6393152 ,
                  0.87914072, 0.58572106, 0.76143341, 0.29045979, 0.95377247 },
                { 0.51708107, 0.74717579, 0.18487715, 0.04873716, 0.07059726,
                  0.58028774, 0.68142662, 0.55150067, 0.78887873, 0.76893886 },
                { 0.73728297, 0.51251407, 0.46420285, 0.97754852, 0.92039877,
                  0.11601519, 0.35504486, 0.1460133 , 0.59217836, 0.056253   },
                { 0.06780346, 0.17262904, 0.92371143, 0.87905201, 0.68320777,
                  0.7448173 , 0.79046747, 0.98040731, 0.34659765, 0.70197663 },
                { 0.8618868 , 0.16323344, 0.08868454, 0.50619684, 0.07231158,
                  0.02178771, 0.84297963, 0.63387913, 0.17086298, 0.67135048 },
                { 0.83550946, 0.90125798, 0.96585332, 0.27865672, 0.79400982,
                  0.82970793, 0.57538057, 0.30016735, 0.40330678, 0.74562826 },
                { 0.77052844, 0.32116391, 0.26971126, 0.18621355, 0.23448397,
                  0.8231777 , 0.99902567, 0.79795006, 0.85836042, 0.6311046  },
                { 0.41166265, 0.17471338, 0.77683983, 0.49330819, 0.9102745 ,
                  0.51938818, 0.72486522, 0.61145149, 0.79150163, 0.45278302 },
                { 0.93048517, 0.3513344 , 0.19473953, 0.93910282, 0.45010037,
                  0.10770768, 0.79543045, 0.61611774, 0.62947145, 0.44071588 },
                { 0.28394176, 0.22062754, 0.79689016, 0.4919695 , 0.44836926,
                  0.39020058, 0.73270976, 0.25147917, 0.28430676, 0.71589892 },
                { 0.6484735 , 0.85325577, 0.5352029 , 0.99654233, 0.02386033,
                  0.20531503, 0.43487405, 0.62425501, 0.33645204, 0.84954852 },
                { 0.3856678 , 0.30695085, 0.73859157, 0.00811291, 0.13747939,
                  0.99772779, 0.60929948, 0.32482726, 0.24024182, 0.97033394 },
                { 0.36833644, 0.94780323, 0.46508207, 0.01294015, 0.79889478,
                  0.94058315, 0.95604152, 0.74377467, 0.13672899, 0.11717243 }
            };

            double[] expected = new double[]
            {
                0.43097635, 0.24870022, 0.00415473, 0.50968253, 0.75716071,
                0.27422768, 0.20087387, 0.41188167, 0.70752884, 0.76268764
            };

            var calc = new AbundanceRatioCalculator(measure, references);
            (double[] actual, bool success) = calc.Calculate();
            System.Console.WriteLine("Actual results");
            foreach (var item in actual)
            {
                System.Console.WriteLine($"{item}");
            }
            Assert.IsTrue(success);
            foreach((double act, double exp) in actual.Zip(expected, Tuple.Create))
            {
                Assert.AreEqual(exp, act, 0.1);
            }
        }
    }
}
